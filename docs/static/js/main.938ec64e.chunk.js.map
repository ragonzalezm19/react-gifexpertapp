{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","prevState","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","GifGridItem","className","src","alt","GifGrid","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAgCeA,EA7BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACrB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACE,mCACE,sBAAMC,SAXW,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAgBP,GAAhB,mBAA+BO,OAC7CN,EAAc,MAMd,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAhBlB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,e,+BCUZG,EAjBF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACRC,EADQ,iDACwCC,UACpDH,GAFY,+DAKKI,MAAMF,GALX,cAKRG,EALQ,gBAMSA,EAAKC,OANd,uBAMNC,EANM,EAMNA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAD,YAAU,CAC9BC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXtB,kBAcPM,GAdO,4CAAH,sDCqBEO,EAlBM,SAACf,GACpB,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNS,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACRpB,EAAQC,GAAUoB,MAAK,SAACZ,GAAD,OACrBU,EAAS,CACPX,KAAMC,EACNQ,SAAS,SAGZ,CAAChB,IAEGiB,GCPMI,EATK,SAAC,GAAuB,EAArBV,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAChC,OACE,sBAAKoB,UAAU,yCAAf,UACE,qBAAKC,IAAKrB,EAAKsB,IAAKZ,IACpB,4BAAIA,QCgBKa,EAlBC,SAAC,GAAkB,IAAhBzB,EAAe,EAAfA,SACjB,EAAkCe,EAAaf,GAAjCa,EAAd,EAAQN,KAAcS,EAAtB,EAAsBA,QAEtB,OACE,qCACE,oBAAIM,UAAU,oCAAd,SAAmDtB,IAElDgB,GAAW,mBAAGM,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SACGT,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aCOjBe,EAlBM,WACnB,MAAoCxC,mBAAS,CAAC,gBAA9C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAEA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG0C,EAAWlB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCRxB4B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.938ec64e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories((prevState) => [inputValue, ...prevState]);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input type='text' value={inputValue} onChange={handleInputChange} />\n      </form>\n    </>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=rsxQz2YDtoXcJtQBvg9Qzc9apD9AJ7Of`;\n\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map((img) => ({\n    id: img.id,\n    title: img.title,\n    url: img.images?.downsized_medium.url,\n  }));\n\n  return gifs;\n};\n\nexport default getGifs;\n","import { useEffect, useState } from 'react';\nimport getGifs from '../helpers/getGifs';\n\nconst useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((gifs) =>\n      setState({\n        data: gifs,\n        loading: false,\n      })\n    );\n  }, [category]);\n\n  return state;\n};\n\nexport default useFetchGifs;\n","import React from 'react';\n\nconst GifGridItem = ({ id, title, url }) => {\n  return (\n    <div className='card animate__animated animate__fadeIn'>\n      <img src={url} alt={title}></img>\n      <p>{title}</p>\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","import React from 'react';\nimport useFetchGifs from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className='animate__animated animate__fadeIn'>{category}</h3>\n\n      {loading && <p className='animate__animated animate__flash'>Loading</p>}\n\n      <div className='card-grid'>\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default GifGrid;\n","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState(['Dragon Ball']);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}